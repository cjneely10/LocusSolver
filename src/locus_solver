#!/usr/bin/env python
from pathlib import Path
from typing import List

from BCBio import GFF
from plumbum import cli

from src.filters.simple_filters import *
from src.util.locus_filter import LocusFilter
from src.util.annotation import Annotation


class LocusSolver(cli.Application):
    """Merge GFF3 files into single annotation set"""
    genome_file: Path
    gff3_files: List[Path] = []
    output_path: Path = Path("/dev/stdout")

    @cli.switch(["-g", "--genome"], str, mandatory=True)
    def set_genome_path(self, genome_path):
        """Path to genome FASTA file"""
        genome_path = Path(genome_path).resolve()
        if not genome_path.exists() or not genome_path.is_file():
            print("Unable to find genome file")
            exit(1)
        self.genome_file = genome_path

    @cli.switch(["-i", "--input-gff3"], str, mandatory=True, list=True)
    def set_gff3_files(self, input_gff3s):
        """Path to annotation GFF3 file. Provide in expected priority sort order"""
        for file in input_gff3s:
            file = Path(file).resolve()
            if not file.exists() or not file.is_file():
                print(f"Unable to find gff3 file {str(file)}")
                exit(1)
            self.gff3_files.append(file)

    @cli.switch(["-o", "--output"], str)
    def set_output_path(self, output_path):
        """Path to output merged results, default stdout"""
        self.output_path = output_path

    def main(self, *identifiers):
        if len(identifiers) != len(self.gff3_files):
            print("Pass identifiers for each gff3 file provided!")
            exit(1)
        annotation_models = []
        for identifier, gff3_file in zip(identifiers, self.gff3_files):
            annotation_models.append(
                Annotation(
                    self.genome_file,
                    gff3_file,
                    identifier
                )
            )
        locus_filter = LocusFilter(annotation_models=annotation_models)
        with open(self.output_path, "w") as merged_file:
            GFF.write(locus_filter.filter(PriorityFilter({i: model for i, model in enumerate(identifiers, start=1)})),
                      merged_file)


if __name__ == "__main__":
    LocusSolver.run()
